{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"data",
				"datapath"
			],
			[
				"dat",
				"datapath"
			],
			[
				"HTTP",
				"HTTPError"
			],
			[
				"netw",
				"network"
			],
			[
				"networ",
				"network_id"
			],
			[
				"Per",
				"Permission"
			],
			[
				"net",
				"network"
			],
			[
				"D",
				"Device"
			],
			[
				"p",
				"permissionid"
			],
			[
				"usern",
				"username"
			],
			[
				"us",
				"username"
			],
			[
				"netwo",
				"networkid"
			],
			[
				"name",
				"name"
			],
			[
				"Data",
				"DatapathContainer"
			],
			[
				"id",
				"id"
			],
			[
				"make",
				"makeRes"
			],
			[
				"res",
				"response"
			],
			[
				"rest_validate_",
				"rest_validate_switchap"
			],
			[
				"up",
				"uplink"
			],
			[
				"req",
				"request"
			],
			[
				"ms",
				"msg"
			],
			[
				"de",
				"Device"
			],
			[
				"devi",
				"device"
			],
			[
				"rest_get_user",
				"rest_get_users"
			],
			[
				"use",
				"username"
			],
			[
				"dev",
				"device_id"
			],
			[
				"user",
				"user_id"
			],
			[
				"re",
				"request"
			],
			[
				"json",
				"jsonify"
			],
			[
				"u",
				"username"
			],
			[
				"rest_v",
				"rest_validate_username"
			],
			[
				"RE",
				"REST_LOG"
			],
			[
				"mac",
				"mac_hex"
			],
			[
				"code",
				"codecs"
			],
			[
				"pa",
				"password"
			],
			[
				"rest",
				"restful_api"
			],
			[
				"config",
				"configuration"
			],
			[
				"pass",
				"password"
			],
			[
				"add",
				"add_argument"
			],
			[
				"Re",
				"RequestParser"
			],
			[
				"js",
				"jsonify"
			],
			[
				"con",
				"connlogs"
			],
			[
				"app",
				"append"
			],
			[
				"au",
				"authlogs"
			],
			[
				"nne",
				"networkname"
			],
			[
				"map",
				"mappingid"
			],
			[
				"device",
				"device"
			],
			[
				"getU",
				"getUserID"
			],
			[
				"method",
				"method"
			],
			[
				"pr",
				"parentNode"
			],
			[
				"db_",
				"db_insert_default"
			],
			[
				"i",
				"i"
			],
			[
				"me",
				"methods"
			],
			[
				"s",
				"String"
			],
			[
				"flas",
				"flash"
			],
			[
				"le",
				"length"
			],
			[
				"red",
				"redirect"
			],
			[
				"Pa",
				"password"
			],
			[
				"ac",
				"action	Attr"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			]
		]
	},
	"buffers":
	[
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "web.conf",
			"settings":
			{
				"buffer_size": 186,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import binascii\ntry:\n	import ipaddress\nexcept ImportError:\n	import ipaddr as ipaddress\n\nfrom sqlalchemy import create_engine, Column, Integer, Boolean, String, Datetime, ForeignKey, UniqueConstraint\nfrom sqlalchemy.orm import relationship, backref, sessionmaker\n\nimport sqlalchemy.ext.declarative\nBase = sqlalchemy.ext.declarative.declarative_base()\n\ndef db_init(*args, **kwargs):\n	engine = create_engine(*args, **kwargs)\n	Base.metadata.create_all(engine)\n	return sessionmaker(bind=engine)()\n\nclass Network(Base):\n	__tablename__ = \"network\"\n	id = Column(Integer, primary_key=True)\n	name = Column(String, unique=True) # updatable\n	\n	permissions = relationship(\"Permission\", cascade=\"all,delete-orphan\", backref=\"network\")\n\nclass Role(Base):\n	__tablename__ = \"user\"\n	id = Column(Integer, primary_key=True)\n	name = Column(String, unique=True) # updatable, so don't use this as key in somewhere else.\n	password = Column(String, nullable=False)\n	create = Column(Datetime, nullable=False)\n	\n	permissions = relationship(\"Permission\", cascade=\"all,delete-orphan\")\n\nclass Device(Base):\n	__tablename__ = \"device\"\n	id = Column(Integer, primary_key=True)\n	mac_hex = Column(String(12), unique=True) # updatable because you'd want to update this field to replace a broken machine to a new one.\n	info = Column(String) # json encoded property key-value store\n	\n	permissions = relationship(\"Permission\", cascade=\"all,delete-orphan\")\n\nclass Permission(Base):\n	'''\n	bootstrap network has both mac or network_user_name to be null, and that \n	row must be the only row in this table.\n	'''\n	__tablename__ = \"permission\"\n	__table_args__ = (UniqueConstraint(\"network_id\",\"device_id\",\"user_id\"),)\n	id = Column(Integer, primary_key=True)\n	network_id = Column(Integer, ForeignKey(\"network.id\"), nullable=False)\n	device_id = Column(Integer, ForeignKey(\"device.id\")) # None means ANY\n	user_id = Column(Integer, ForeignKey(\"user.id\")) # None means ANY\n	\n	def is_bootstrap(self):\n		return self.device_id == None and self.user_id == None\n\nclass DatapathContainer(Base):\n	__tablename__ = \"datapath_container\"\n	id = Column(Integer, primary_key=True)\n	ip_address = Column(String, unique=True, nullable=False) # IPv4 or IPv6 address of the openflow switch housing\n	# binascii.b2a_hex(ipaddress.IPNetwork(ip_address).packed).\n	# This column was introduced to reduce the cost of IP address matching.\n	# The meaning of content itself is the same with ip_address, so theoretically, this column is not required.\n	ip_address_hex = Column(String, unique=True, nullable=False)\n	name = Column(String) # hostname\n	type = Column(String) # this setting determines how to submit custom commands that is out of scope of openflow.\n	\n	datapaths = relationship(\"Datapath\", cascade=\"all,delete-orphan\")\n	vlan_static = relationship(\"VlanStatic\", cascade=\"all,delete-orphan\", backref=\"container\")\n	\n	@staticmethod\n	def find_by_ip_address(session, ip_address):\n		candidates = []\n		candidates.append(binascii.b2a_hex(ipaddress.IPNetwork(ip_address).packed))\n		if ip_address.find(\".\") > 0:\n			if ip_address.startswith(\"::ffff:\"):\n				candidates.append(binascii.b2a_hex(ipaddress.IPNetwork(ip_address[len(\"::ffff:\"):]).packed))\n			elif ip_address.startswith(\"::ffff:0:\"):\n				candidates.append(binascii.b2a_hex(ipaddress.IPNetwork(ip_address[len(\"::ffff:0:\"):]).packed))\n			\n			if ip_address.find(\":\") < 0:\n				candidates.append(binascii.b2a_hex(ipaddress.IPNetwork(\"::ffff:\"+ip_address).packed))\n				candidates.append(binascii.b2a_hex(ipaddress.IPNetwork(\"::ffff:0:\"+ip_address).packed))\n		\n		return session.query(DatapathContainer).filter(\n			DatapathContainer.ip_address_hex.in_(candidates)).first()\n\nclass Datapath(Base):\n	__tablename__ = \"datapath\"\n	id = Column(Integer, primary_key=True)\n	datapath_hex = Column(String(16)) # openflow switch datapath_id in hex. Note this is nullable, meaning Datapath may be specified only by datapath_container\n	uplink = Column(String, nullable=False) # uplink port name or number on the datapath.\n	container_id = Column(Integer, ForeignKey(\"datapath_container.id\")) # Note this is nullable, cascading does not happen on NULL\n\nclass VlanStatic(Base):\n	'''\n	if you want to map a specific vlan to some network, then create an entry in this table.\n	'''\n	__tablename__ = \"vlan_static\"\n	__table_args__ = (UniqueConstraint(\"datapath_hex\",\"container_id\",\"network_id\"), UniqueConstraint(\"datapath_hex\",\"container_id\",\"vlan\"))\n	id = Column(Integer, primary_key=True)\n	datapath_hex = Column(String(16))\n	container_id = Column(Integer, ForeignKey(\"datapath_container.id\"))\n	network_id = Column(Integer, ForeignKey(\"network.id\"), nullable=False)\n	vlan = Column(Integer, nullable=False)\n\nclass Config(Base):\n	__tablename__ = \"config\"\n	name = Column(String, primary_key=True)\n	value = Column(String)\n\n",
			"file": "db.py",
			"file_size": 4823,
			"file_write_time": 130291440555394271,
			"settings":
			{
				"buffer_size": 4766,
				"line_ending": "Windows"
			}
		},
		{
			"file": "runserver.py",
			"settings":
			{
				"buffer_size": 121,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 120.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/liupeng/OmniSphere/README.md",
		"/home/liupeng/OmniSphere/uno/bootnet/README.md",
		"/home/liupeng/OmniSphere/twink/ofp4/parse.py",
		"/home/liupeng/OmniSphere/uno/bootnet/proxy.py",
		"/home/liupeng/OmniSphere/uno/bootnet/forms.py",
		"/home/liupeng/OmniSphere/uno/zk.py",
		"/home/liupeng/OmniSphere/uno/bootnet/__init__.py",
		"/home/liupeng/OmniSphere/uno/__init__.py",
		"/home/liupeng/OmniSphere/uno/README.md",
		"/home/liupeng/OmniSphere/uno/web/__init__.py",
		"/home/liupeng/OmniSphere/uno/__main__.py",
		"/home/liupeng/OmniSphere/example.conf",
		"/home/liupeng/OmniSphere/webui/testapi.py",
		"/home/liupeng/OmniSphere/webui/server/forms.py",
		"/home/liupeng/OmniSphere/webui/server/config.py",
		"/home/liupeng/OmniSphere/webui/server/views.py",
		"/home/liupeng/OmniSphere/webui/server/__init__.py",
		"/home/liupeng/OmniSphere/webui/server/__init__.test.py",
		"/home/liupeng/OmniSphere/webui/server/__init__.release.py",
		"/home/liupeng/OmniSphere/uno/switch.py",
		"/home/liupeng/OmniSphere/webui/apiclient.py",
		"/home/liupeng/OmniSphere/webui/apidata.json",
		"/home/liupeng/OmniSphere/webui/server/restapi.py",
		"/home/liupeng/OmniSphere/webui/testdata.json",
		"/home/liupeng/OmniSphere/webui/server/templates/switchap_list.html",
		"/home/liupeng/OmniSphere/webui/example_restapi.conf",
		"/home/liupeng/OmniSphere/webui/runserver.py",
		"/home/liupeng/OmniSphere/webui/example_test1.conf",
		"/home/liupeng/OmniSphere/uno/bootnet/dnsmasq.py",
		"/home/liupeng/OmniSphere/uno/bootnet/__main__.py",
		"/home/liupeng/OmniSphere/webui/server/templates/connection.html",
		"/home/liupeng/OmniSphere/webui/server/templates/base.html",
		"/home/liupeng/OmniSphere/webui/server/templates/portal_select.html",
		"/home/liupeng/OmniSphere/webui/server/templates/portal_login.html",
		"/home/liupeng/OmniSphere/webui/server/static/js/common.js",
		"/home/liupeng/OmniSphere/webui/example_test2.conf",
		"/home/liupeng/OmniSphere/webui/server/eventlog.py",
		"/home/liupeng/OmniSphere/webui/server/templates/log.html",
		"/home/liupeng/OmniSphere/webui/eventlog.py",
		"/home/liupeng/OmniSphere/webui/server/templates/mapping_info.html",
		"/home/liupeng/OmniSphere/webui/server/templates/mapping_register.html",
		"/home/liupeng/OmniSphere/webui/server/templates/mapping_update.html",
		"/home/liupeng/OmniSphere/webui/server/templates/switchap_update.html",
		"/home/liupeng/OmniSphere/webui/server/templates/switchap_register.html",
		"/home/liupeng/OmniSphere/webui/server/templates/system_setting.html",
		"/home/liupeng/OmniSphere/webui/server/templates/switchap_info.html",
		"/home/liupeng/OmniSphere/webui/server/static/css/common.css",
		"/home/liupeng/OmniSphere/twink/gevent_ovs.py",
		"/home/liupeng/OmniSphere/webui/server/templates/network_list.html",
		"/home/liupeng/OmniSphere/webui/server/templates/network_info.html",
		"/home/liupeng/OmniSphere/webui/server/templates/network_register.html",
		"/home/liupeng/OmniSphere/webui/server/templates/user_list.html",
		"/home/liupeng/OmniSphere/webui/server/templates/user_register.html",
		"/home/liupeng/OmniSphere/webui/README.md",
		"/home/liupeng/OmniSphere/webui/server/templates/portal_result.html",
		"/home/liupeng/OmniSphere/uno/config.py",
		"/home/liupeng/omni/webui/server/templates/device_info.html",
		"/home/liupeng/omni/webui/server/templates/device_update.html",
		"/home/liupeng/omni/webui/server/templates/device_list.html",
		"/home/liupeng/omni/webui/server/templates/user_info.html",
		"/home/liupeng/omni/webui/server/templates/device_register.html",
		"/home/liupeng/omni/webui/server/templates/login.html",
		"/home/liupeng/omni/webui/server/templates/user_update.html",
		"/home/liupeng/omni/webui/server/templates/user_register.html",
		"/home/liupeng/omni/webui/server/templates/user_list.html",
		"/home/liupeng/omni/webui/server/static/js/common.js",
		"/home/liupeng/omni/webui/server/static/css/common.css",
		"/home/liupeng/omni/webui/server/templates/portal_login.html",
		"/home/liupeng/omni/webui/server/config.py",
		"/home/liupeng/omni/webui/server/views.py",
		"/home/liupeng/omni/webui/server/templates/menu.html",
		"/home/liupeng/omni/webui/server/__init__.py",
		"/home/liupeng/omni/webui/runserver.py",
		"/home/liupeng/omni/webui/server/__main__.py",
		"/home/liupeng/omni/webui/server/models.py",
		"/home/liupeng/omni/webui/rest.py",
		"/home/liupeng/omni/webui/app/templates/login.html",
		"/home/liupeng/omni/webui/app/static/css/common.css",
		"/home/liupeng/omni/webui/app/server.py",
		"/home/liupeng/omni/webui/app/__init__.py",
		"/home/liupeng/omni/webui/server/server.py",
		"/home/liupeng/omni/webui/app/templates/network_list.html",
		"/home/liupeng/omni/misc/web_ui/server.py",
		"/home/liupeng/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/liupeng/OmniSphere/",
			"/home/liupeng/OmniSphere/webui/",
			"/home/liupeng/OmniSphere/webui/server/templates",
			"/home/liupeng/OmniSphere"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"date",
			"zk.create",
			"mac",
			"ovs",
			"ovs-ctl",
			"read_message",
			"StreamChannel",
			"hello",
			"send",
			"StreamChannel",
			"bootnet",
			"boot",
			"bootnet",
			"StreamHandler",
			"spawn",
			"serve",
			"server_forever",
			"zookeeper",
			"foreign",
			"for",
			"PUT",
			"self",
			"self.",
			"DELETE",
			"REST_LOG",
			"code",
			"makeRes",
			"is Not",
			"is N",
			"is not",
			"is",
			":\n",
			"makeRes",
			"rest_validate_username",
			"makeRes",
			"Content-Type",
			"code",
			"status_code",
			"jdata",
			"ZkQueuePopperChannel",
			"order_by",
			"rest/",
			"/rest/",
			"mapping",
			"204",
			"@app.route('/rest/switchap/<int:id>', methods=['PUT'])\n",
			"PUT",
			"405",
			"ZkChannel",
			"ZkQueuePopperChannel",
			"StreamHandler",
			"channel",
			"channel_cls",
			"type",
			"channel_cls",
			"StreamServer",
			"channel_cls",
			"StreamHandler",
			"UnoChannel",
			"MessageHandler",
			"spawn",
			"Context",
			"url_for",
			"abort",
			"getMappingText",
			"Permission",
			"message",
			"method",
			"filter",
			"ip_address",
			"userdata",
			"parse_args",
			"LOG",
			"restful",
			"urllib2",
			"dumps",
			"this",
			"name",
			"host",
			"getUsersForRest",
			"getusers",
			"print",
			"for k,v",
			"action",
			"json.dumps",
			"jsonify",
			"utf",
			"u(",
			"User.name",
			"rest",
			"    ",
			"KazooClient",
			"Queue",
			"Rest",
			"rest",
			"reqparse",
			"urllib2",
			"urlopen",
			"http_name",
			"factory",
			"j",
			"-j",
			"ctx",
			"x",
			"register_user_state",
			"user_state",
			"networkmac",
			"KazooClient",
			"flash",
			"readConnLog",
			"readAuthLog",
			"for",
			"readAuthLog",
			"append",
			"appent",
			"insert",
			"AuthLog",
			"db_init",
			"MappingRegisterForm",
			"684",
			"TIMEOUT",
			"TIME",
			"TIMEO",
			"cfg",
			"TIMEOUT",
			"getTimeout",
			"validate",
			"need a "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"omni.v1/",
			"permission",
			"datadict",
			"REST_LOG",
			"urllib",
			"username",
			"\\t",
			"MAC"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "web.conf",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 186,
						"regions":
						{
						},
						"selection":
						[
							[
								186,
								186
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "db.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4766,
						"regions":
						{
						},
						"selection":
						[
							[
								982,
								982
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 228.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "runserver.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 121,
						"regions":
						{
						},
						"selection":
						[
							[
								121,
								121
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"project": "halfmore.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 49.0,
		"selected_items":
		[
			[
				"signal_poll",
				"signal_poll"
			],
			[
				"signal_unregister",
				"signal_unregister"
			],
			[
				"ovsrec_interface_columns_init",
				"ovsrec_interface_columns_init"
			],
			[
				"ovsrec_init",
				"ovsrec_init"
			]
		],
		"width": 392.0
	},
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 249.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
